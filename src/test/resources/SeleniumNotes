
Add Selenium (WebDriver 4.0) lib/jar/dependency into your project
   - Selenium automates web aps but not desktopapps
   - Mobile apps can be automated using appium which is a wrapper on Selenium
Check your browser version and get the required driver file - 112.0.5615     
Create a TestNg class, create testcase and then add Selenium script
Then run testcase and check the report/result

Selenium Architecture diagram: https://www.softwaretestingmaterial.com/wp-content/uploads/2017/12/Selenium-WebDriver-Architecture.png

DOM - document  object locator or HTML window

HTML tag names:

html --> tag (HyperTextMarkupLanguage)
body -->
div -  division
p - paragraph <p> </p>
a - anchor <a src="url"> </a>
li - list <li> </li>
ul - unordered list <ul> </ul>
span -  <span> </span>
img - image  <img> </img>

	:: Selenium Locators ::
	
	id
	name
	className
	linkText
	partialLinkText
	tagName

xPath
CSSSelector --

xPath -->  Absolute xpath which starts with / and this is not recommended
           /html/body/div[1]/div[1]/div[4]/ul/li[2]/a
           
            
           Relative xpath which starts with //
           //a[text()='Sign up']  --> Exact text match
           //a[.='Sign up']  --> Exact text match
           
           //a[contains(text(),'Sign up')] --> Partial text match
           
           //li[@id='nav_signup']  --> Attribute based xpath
           //li[@class='class_signup'] 
           //li[@name='nav_signup'] 
           //li[@title='title'] 
           
           //li[@id='nav_signup']/a  --> Parent to child
           //a[.='Sign up']/..  --> Child to its parent
           
              *****************************
           //h1[.='About Speak Languages']/parent::div      ---> Child to parent
             //a[.='Sign up']/..                            ---> Child to its parent
         
           
           //div[@id='community']//li//text() --> To locate an element which is just a text and does not have any tagName
           
           //li[@id='nav_signup']/a     --> Parent to child
           //li[@id='nav_login']/a      --> Parent to child
           
           *****************************
           
           (//p[@class='site_link']/a)[2] --> Index based. Trying to locate second element out of all matchings
           
           (//p[@class='site_link']/a)[1]    --> to locate first matching element 
           (//p[@class='site_link']/a)[last()] --> to locate last matching element

           //a[.='Privacy policy']/following-sibling::a
           //a[.='Terms of use']/preceding-sibling::a
           
           //h1[.='About Speak Languages']/ancestor::div[@id='wrapper']     --> Child to its ancestor
           
           //*    --> All the tags in the DOM -  document object model
           //a   ---> It locates all the anchor tags in the screen

Issues:

1. Run script in Chrome - Mac machine
2. Scroll up  - not working
3. WebElement details not coming on the script


    :: Selenium methods::


get(String url) --> This method launches your application
navigate().back() --> this method navigates back the browser
navigate().forward() --> this method navigates forwards the browser
navigate().refresh() --> this method refreshed the browser
maximize() --> This method will maximize the browser

Dimension dimension = new Dimension(1920, 1080);
setSize(dimension) --> This method will resie the window depending on the dimensions passed

newWindow(WindowType.TAB) --> // Opens a new tab and switches to new tab

getWindowHandle()-->
getWindowHandles()-->
switchToWindow()-->

close() --> It will close current window
quit() --> It will close all opned windows

clear()-->we clear the text in text field
sendKeys(String value) --> This method is used to pass the string value into a text field
click() --> Used to click on a given element

getText() --> This method is sued to get the text on the screen or web page

getAttribute() 	--> This method is used to get the attribute val 
getTitle() --> To get the title of the web page
getCurrentUrl() ---> This method gives the page Url

isDisplayed()
isEnabled()
isSelected()

JavascriptExecutor - Used this in ScrollToElement example
Actions class in Selenium
mouseHover() --> 
dragDrop() --> Drag from source and drop it in destination
Alert.accept()-->
Alert.dismiss()-->

findElement()-->
// Resume on the below methods explanation next week, 16/17 september
findElements()-->

Select class in Selenium
SelectByIndex()-->
SelectBYValue()-->
SelectByVisibleText()-->

capture screenshot

//Implicit and ExplicitWaits

   ::
   
Page Object Model  - POM  -  it is a Design pattern - it is a best practice in automation
pom.xml - > Project Object Model . It is an xml based project document
            -  you will add your dependencies/plugins/configurations
            
            
            
How to develop automation scripts in real time ?

1. Get the requirements (Jira Tickets, TestCases)
2. Review testcases (Get it clarified and also get the required testdata)
3. Findout positive and negative flows of the testcase
4. Make sure you have working automation framework
5. Create new packages, classes and testcases
6. implement POM (Page Object model) -  methods, locators
7. Develop TestNG testcases by adding valid assertions
8. Fail or Pass the Testcase and verify the results



2 things

1. In locating elements in the DOM uniquely
2. In developing the script logic to handle multiple scenarios in a single script

Assignment: practice xpath and selenium methods


===== TestNG ==== It is testing framework
 Test Next Genaration
 
 1. Organize the TCs or Testscript development TCs (group the TCs, prioritize the TCs)
 2. Data driven testing
 3. Test Reports
 4. Easy to configure and run them in command prompt or in Jenkins build job
 
 
 POM - Page Object Model - Design pattern - best practice - good to have feature in automation
 pom.xml -  project object model  xml doc - it is an xml document where we can add plugins and dependencies/libs of the project




























            
            
            

